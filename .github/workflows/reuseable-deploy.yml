name: Deploy

on:
  workflow_call:
    inputs:
      destination:
        type: string
      build-name:
        type: string
      build-path:
        type: string
      clean-up-script-dest:
        required: false
        type: string

    secrets:
      SERVER_USER:
        required: true
      SERVER_HOST:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.build-name }}
          path: ${{ inputs.build-path }}

      - name: Setup Private Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

      - name: Add Known Host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.SERVER_HOST }}" >> ~/.ssh/known_hosts

      - name: Full Deploy Script
        run: |
          set -euo pipefail

          # 1) Compute folder
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          FOLDER_NAME="${TIMESTAMP}_${GITHUB_SHA::7}"
          echo ">>> Deploying to folder: $FOLDER_NAME"

          # 2) Create remote dir
          ssh -i private_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            "mkdir -p ${{ inputs.destination }}/$FOLDER_NAME"

          # 3) Upload artifacts
          scp -r -i private_key ${{ inputs.build-path }}/* \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ inputs.destination }}/$FOLDER_NAME

          # 4) Symlink ‚Äúrelease‚Äù to new folder
          ssh -i private_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
            cd ${{ inputs.destination }}
            ln -sfn $FOLDER_NAME release
          EOF

          # 5) Optional cleanup script
          if [[ -n "${{ inputs.clean-up-script-dest }}" ]]; then
            echo ">>> Running cleanup script"
            ssh -i private_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
              set -euo pipefail

              # Ensure a parameter is passed
              if [ $# -ne 1 ]; then
                echo "‚ùå Usage: ${{inputs.destination}} <relative-deploy-folder>"
                exit 1
              fi

              # Get absolute path of script directory
              SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
              TARGET_DIR="$(realpath "$1")"

              # Check that the target is inside the script directory
              if [[ "$TARGET_DIR" != "$SCRIPT_DIR"* ]]; then
                echo "‚ùå Refusing to operate outside script directory: $TARGET_DIR"
                exit 1
              fi

              cd "$TARGET_DIR" || { echo "‚ùå Failed to cd into $TARGET_DIR"; exit 1; }

              echo "üìÅ Cleaning in: $TARGET_DIR"

              # Get absolute path of the symlink target
              target=$(readlink -f release)

              # Loop through all folders (excluding symlinks)
              for dir in */; do
                [ -d "$dir" ] || continue
                fullpath=$(realpath "$dir")
                if [[ "$fullpath" != "$target" ]]; then
                  echo "üóëÔ∏è Removing $dir"
                  rm -rf "$dir"
                else
                  echo "‚úÖ Keeping $dir (symlink target)"
                fi
              done

              echo "üéâ Done cleaning!"
            EOF
          fi
